---
import {getCollection} from 'astro:content'

export type Ingredient = string | {name: string; plural?: boolean; quantity?: string; notes?: string}

export interface Props {
    ingredient: Ingredient
}

const { ingredient } = Astro.props

let slug, name, quantity, notes;
let link = false;
if (typeof ingredient === 'string') {
    const parts = ingredient.split(' ')
    slug = parts[0]
    quantity = parts[1]
} else {
    slug = ingredient.name;
    quantity = ingredient.quantity;
    notes = ingredient.notes;
}

const recipes = await getCollection('recipes')
const recipe = recipes.filter(p => p.slug === slug)[0]
if (recipe !== undefined) {
    name = recipe.data.title
    link = true
} else {
    const ingredientDatas = await getCollection('ingredients')
    const ingredientData = ingredientDatas.filter(p => p.slug === slug)[0]
    if (ingredientData !== undefined) {
        name = ingredientData.data.name
	if (ingredient.plural || (quantity && +quantity > 1)) {
            name = ingredientData.data.plural ?? `${name}s`
        }
    }
}

if (name === undefined) {
    name = slug;
}

function feq(a, b) {
    const EPSILON = 0.001
    return (a - EPSILON <= b) && (b <= a + EPSILON)
}

function float(x) {
    x = '' + x
    const match = x.match(/^[+-]?(\d+(\.\d*)?|\.\d+)/)
    const f = match ? parseFloat(match[0]) : NaN
    const rest = x.slice(match[0].length)
    return { f, rest }
}

if (quantity) {
    const { f, rest } = float(quantity)
    const intPart = Math.floor(f)
    const floatPart = f - intPart
    const whole = intPart == 0 ? '' : ('' + intPart)
    if (feq(floatPart, 0.25)) {
        quantity = `${whole} 1/4`
    } else if (feq(floatPart, 0.5)) {
        quantity = `${whole} 1/2`
    } else if (feq(floatPart, 0.75)) {
        quantity = `${whole} 3/4`
    } else {
        quantity = `${whole}`
    }
    quantity += rest
}
---

<span>
    {quantity}
    { link ?
        <a href={`/r/${slug}`}> {name} </a> :
        name
    }
    {notes && <em>({notes})</em>}
</span>


<style>
</style>

---
import {getCollection, getEntry} from 'astro:content'

import {getIngredient, getRecipe, getTag} from '../utils/collections'

export type Ingredient = string | {name: string; plural?: boolean; quantity?: string; notes?: string}

export interface Props {
    ingredient: Ingredient
}

const { ingredient } = Astro.props

async function findIngredientData() {
    let slug, name, quantity, notes;
    let link = false;
    if (typeof ingredient === 'string') {
        const parts = ingredient.split(' ')
        slug = parts[0]
        quantity = parts[1]
    } else {
        slug = ingredient.name;
        quantity = ingredient.quantity;
        notes = ingredient.notes;
    }
    
    if (slug.startsWith('#')) {
        slug = slug.slice(1);
        const tag = await getTag(slug);
        if (tag === undefined)
	    return {name: slug, slug, notes, link, quantity};
        return {
            name: tag.name,
            link: `/t/${slug}`,
	    notes, quantity, slug,
        };
    }
    const recipe = await getRecipe(slug)
    if (recipe !== undefined)
        return {
            name: recipe.title,
            link: `/r/${slug}`,
	    notes, quantity, slug,
        };
    const ingredientData = await getIngredient(slug)
    if (ingredientData !== undefined) {
        let name  = ingredientData.name
        if (ingredient.plural || (quantity && +quantity > 1)) {
            name = ingredientData.plural ?? `${name}s`
        }
	return {name, slug, quantity, notes, link};
    }

    return {name: slug, slug, link, notes, quantity};
}

function feq(a, b) {
    const EPSILON = 0.001
    return (a - EPSILON <= b) && (b <= a + EPSILON)
}

function float(x) {
    x = '' + x
    const match = x.match(/^[+-]?(\d+(\.\d*)?|\.\d+)/)
    const f = match ? parseFloat(match[0]) : NaN
    const rest = x.slice(match[0].length)
    return { f, rest }
}

function formatQuantity(quantity: string) {
    if (!quantity)
        return quantity;
    const { f, rest } = float(quantity)
    const intPart = Math.floor(f)
    const floatPart = f - intPart
    const whole = intPart == 0 ? '' : ('' + intPart)
    if (feq(floatPart, 0.25)) {
        quantity = `${whole} 1/4`
    } else if (feq(floatPart, 0.5)) {
        quantity = `${whole} 1/2`
    } else if (feq(floatPart, 0.75)) {
        quantity = `${whole} 3/4`
    } else {
        quantity = `${whole}`
    }
    quantity += rest
    return quantity
}

const {name, quantity, slug, notes, link} = await findIngredientData();
---

<span>
    {formatQuantity(quantity)}
    { link ?
        <a href={link}> {name} </a> :
        name
    }
    {notes && <em>({notes})</em>}
</span>


<style>
</style>
